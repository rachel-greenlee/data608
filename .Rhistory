values = c("above"="#00ba38", "below"="#f8766d")) +
labs(subtitle="calculated from available data'",
title= "I need a title")
View(mort_comp)
shiny::runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q1')
?seletInput
?selectInput
runApp('assign3_shiny/Q1')
View(mort_2010)
runApp('assign3_shiny/Q1')
runApp('assign3_shiny/Q1')
runApp('assign3_shiny/Q1')
knitr::opts_chunk$set(echo = TRUE)
ggplot(mort_2010, aes(x = crude_rate, y = reorder(State, crude_rate) +
geom_point(size=5) +
geom_segment(aes(x = crude_rate,
xend = crude_rate,
y = 0,
yend = State)) +
labs(title="Lollipop Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
theme_set(theme_bw())
ggplot(mort_2010, aes(x = crude_rate, y = reorder(State, crude_rate))) +
geom_point(size=5) +
geom_segment(aes(x = crude_rate,
xend = crude_rate,
y = 0,
yend = State)) +
labs(title="Lollipop Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
ggplot(mort_2010, aes(x = crude_rate, y = reorder(State, crude_rate))) +
geom_point(size=5) +
geom_segment(aes(x = crude_rate,
xend = crude_rate,
y = 0,
yend = State)) +
labs(title="Lollipop Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg")
ggplot(mort_2010, aes(x = crude_rate, y = reorder(State, crude_rate))) +
geom_point(size=5) +
geom_segment(aes(x = 0,
xend = State,
y = crude_rate,
yend = crude_rate)) +
labs(title="Lollipop Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg")
crude_rate
ggplot(mort_2010, aes(x = crude_rate, y = reorder(State, crude_rate))) +
geom_point(size=5) +
geom_segment(aes(x = crude_rate,
xend = crude_rate,
y = 0,
yend = State)) +
labs(title="Lollipop Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg")
ggplot(mort_2010, aes(x = crude_rate, y = reorder(State, crude_rate))) +
geom_point(size=5) +
geom_segment(aes(x = crude_rate,
xend = crude_rate,
y = 0,
yend = State)) +
flip_coord() +
labs(title="Lollipop Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg")
ggplot(mort_2010, aes(x = crude_rate, y = reorder(State, crude_rate))) +
geom_point(size=5) +
geom_segment(aes(x = crude_rate,
xend = crude_rate,
y = 0,
yend = State)) +
coord_flip() +
labs(title="Lollipop Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg")
ggplot(mort_2010, aes(y = crude_rate, x = reorder(State, crude_rate))) +
geom_point(size=5) +
geom_segment(aes(x = crude_rate,
xend = crude_rate,
y = 0,
yend = State)) +
coord_flip() +
labs(title="Lollipop Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg")
ggplot(mort_2010, aes(y = crude_rate, x = reorder(State, crude_rate))) +
geom_point(size=5) +
geom_segment(aes(y = crude_rate,
yend = crude_rate,
x = 0,
xend = State)) +
coord_flip() +
labs(title="Lollipop Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg")
ggplot(mort_2010, aes(y = crude_rate, x = reorder(State, crude_rate))) +
geom_point(size=5) +
geom_segment(aes(y = crude_rate,
yend = crude_rate,
x = 0,
xend = State)) +
labs(title="Lollipop Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg")
ggplot( aes(x = reorder(State, crude_rate), y = crude_rate)) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_bw() +
xlab("")
ggplot(mort_2010, aes(x = reorder(State, crude_rate), y = crude_rate)) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_bw() +
xlab("")
mort_2010 %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate)) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_bw() +
xlab("")
mort_2010_test <- subset(mort_2010, ICD.Chapter == "Neoplasms")
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate)) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_bw() +
xlab("")
mort_2010_test <- subset(mort_2010, ICD.Chapter == "Neoplasms")
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate)) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_bw() +
xlab("")
mort_2010_test <- subset(mort_2010, ICD.Chapter == "Neoplasms")
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate)) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_bw() +
xlab("")
mort_2010_test <- subset(mort_2010, ICD.Chapter == "Neoplasms")
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate)) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=8, color="orange") +
coord_flip() +
theme_bw() +
xlab("")
mort_2010_test <- subset(mort_2010, ICD.Chapter == "Neoplasms")
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate)) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=7, color="orange") +
coord_flip() +
theme_bw() +
xlab("")
mort_2010_test <- subset(mort_2010, ICD.Chapter == "Neoplasms")
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate, label = round(crude_rate, 1))) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=7, color="orange") +
geom_text(color = "white", size = 2)
coord_flip() +
theme_bw() +
xlab("")
mort_2010_test <- subset(mort_2010, ICD.Chapter == "Neoplasms")
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate, label = paste(round(crude_rate, 1)))) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=7, color="orange") +
geom_text(color = "white", size = 2)
coord_flip() +
theme_bw() +
xlab("")
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate, label = paste(round(crude_rate, 1)))) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=7, color="orange") +
geom_text(color = "white", size = 2) +
coord_flip() +
theme_bw() +
xlab("")
mort_2010_test <- subset(mort_2010, ICD.Chapter == "Neoplasms")
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate, label = paste(round(crude_rate, 1)))) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=7, color="orange") +
geom_text(color = "white", size = 2) +
coord_flip() +
xlab("State")
mort_2010_test <- subset(mort_2010, ICD.Chapter == "Neoplasms")
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate, label = paste(round(crude_rate, 1)))) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=7, color="orange") +
geom_text(color = "white", size = 2) +
coord_flip() +
xlab("State") +
ylab("Crude Rate (per 100,000)")
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate, label = paste(round(crude_rate, 1)))) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=7, color="orange") +
geom_text(color = "white", size = 2) +
coord_flip() +
xlab("State") +
ylab("Crude Rate (per 100,000)") +
theme_minimal()
mort_2010_test <- subset(mort_2010, ICD.Chapter == "Neoplasms")
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate, label = paste(round(crude_rate, 1)))) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=7, color="orange") +
geom_text(color = "white", size = 2) +
coord_flip() +
xlab("State") +
ylab("Crude Rate (per 100,000)") +
labs(title = "2020 Crude Mortality Rates, by State",
subtitle = "Crude mortality rates are calculated based on the state's population and the number of death's by the selected cause. The actual values below represent the number of deaths per 100,000 individuals.",
caption = "Note: data is not available for all states on all causes.") +
theme_minimal()
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate, label = paste(round(crude_rate, 1)))) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=7, color="orange") +
geom_text(color = "white", size = 2) +
coord_flip() +
xlab("State") +
ylab("Crude Rate (per 100,000)") +
labs(title = "2020 Crude Mortality Rates, by State",
subtitle = "Crude mortality rates are calculated based on the state's population and the number of death's by the selected cause. The actual values below represent the number of deaths per 100,000 individuals.",
caption = "Note: data is not available for all states on all causes.") +
theme_minimal() +
theme(plot.subtitle = element_text(size = 12, color = "darkslategrey", margin = margin(b = 25, l = -25)))
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate, label = paste(round(crude_rate, 1)))) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=7, color="orange") +
geom_text(color = "white", size = 2) +
coord_flip() +
xlab("State") +
ylab("Crude Rate (per 100,000)") +
labs(title = "2020 Crude Mortality Rates, by State",
subtitle = "Crude mortality rates are calculated based on the state's population and the number of death's by the selected cause. The actual values below represent the number of deaths per 100,000 individuals.",
caption = "Note: data is not available for all states on all causes.") +
theme_minimal() +
theme(axis.title = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
text = element_text(family = "Georgia"),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 20, margin = margin(b = 10), hjust = 0),
plot.subtitle = element_text(size = 12, color = "darkslategrey", margin = margin(b = 25, l = -25)),
plot.caption = element_text(size = 8, margin = margin(t = 10), color = "grey70", hjust = 0))
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate, label = paste(round(crude_rate, 1)))) +
geom_segment(aes(xend = State, yend = 0)) +
geom_point( size=7, color="orange") +
geom_text(color = "white", size = 2) +
coord_flip() +
xlab("State") +
ylab("Crude Rate (per 100,000)") +
labs(title = "2020 Crude Mortality Rates, by State",
subtitle = "Crude mortality rates are calculated based on the state's population and the number of death's by the selected cause. The actual values below represent the number of deaths per 100,000 individuals.",
caption = "Note: data is not available for all states on all causes.") +
theme_minimal()
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate, label = paste(round(crude_rate, 1)))) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point( size=7, color="orange") +
geom_text(color = "white", size = 2) +
coord_flip() +
xlab("State") +
ylab("Crude Rate (per 100,000)") +
labs(title = "2020 Crude Mortality Rates, by State",
subtitle = "Crude mortality rates are calculated based on the state's population and the number of death's by the selected cause. The actual values below represent the number of deaths per 100,000 individuals.",
caption = "Note: data is not available for all states on all causes.") +
theme_minimal()
mort_2010_test %>%
arrange(crude_rate) %>%
mutate(State = factor(State, levels = State)) %>%
ggplot(aes(x = reorder(State, crude_rate), y = crude_rate, label = paste(round(crude_rate, 1)))) +
geom_segment(aes(xend = State, yend = 0), color = "grey50") +
geom_point( size=7, color="orange") +
geom_text(color = "white", size = 2) +
coord_flip() +
xlab("State") +
ylab("Crude Rate (per 100,000)") +
labs(title = "2020 Crude Mortality Rates, by State",
subtitle = "Crude mortality rates are calculated based on the state's population and the number of death's by the selected cause. The actual values below represent the number of deaths per 100,000 individuals.",
caption = "Note: data is not available for all states on all causes.")
runApp('assign3_shiny/Q1')
install.packages(ggthemr)
library(ggthemr)
ggplot(mort_2010, aes(x = crude_rate, y = reorder(State, crude_rate))) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "2010 Crude Mortality Rates, by State",
x = "Crude Rate (Per 100,000)",
y ="State") +
ggthemr("dust")
library(ggthemr)
runApp('assign3_shiny/Q1')
shiny::runApp()
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
install.packages(shinyWidgets)
library(shinyWidgets)
install.packages(shinyWidgets)
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp()
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
dusty <- #b2a595
sherbet <- #f2bc8f
zinnia <- #e39482
backs <- #faf7f2
knitr::opts_chunk$set(echo = TRUE)
dusty <- #b2a595
sherbet <- #f2bc8f
zinnia <- #e39482
backs <- #faf7f2
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp()
runApp()
shiny::runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
runApp('~/ds_projects/data608/my_work/assign3_shiny/Q2')
shiny::runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q1')
runApp()
runApp('assign3_shiny/Q1')
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q1')
runApp()
runApp('assign3_shiny/Q1')
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp()
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp()
runApp('assign3_shiny/Q2')
runApp()
runApp('assign3_shiny/Q2')
runApp()
shiny::runApp('assign3_shiny/Q2')
runApp()
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp('assign3_shiny/Q2')
runApp()
runApp('assign3_shiny/Q2')
runApp()
runApp('assign3_shiny/Q2')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='rachel-greenlee',
token='A7CACBDCB2456023CCDD42C08EDE6B11',
secret='<SECRET>')
rsconnect::setAccountInfo(name='rachel-greenlee',
token='A7CACBDCB2456023CCDD42C08EDE6B11',
secret='mDMAuPIAbtVnJ2LoJD6xirAJ6h4cXHHXCaAbgVCK')
setwd("~/ds_projects/data608/my_work/assign3_shiny")
library(rsconnect)
rsconnect::deployApp('/Q1')
library(rsconnect)
rsconnect::deployApp('Q1')
library(rsconnect)
rsconnect::deployApp('~/ds_projects/data608/my_work/assign3_shiny/Q1')
deployApp(~/ds_projects/data608/my_work/assign3_shiny/Q1_app)
deployApp("~/ds_projects/data608/my_work/assign3_shiny/Q1_app")
deployApp("~/ds_projects/data608/my_work/assign3_shiny/Q2_app")
shiny::runApp('Q2_app')
runApp('Q2_app')
deployApp("~/ds_projects/data608/my_work/assign3_shiny/Q2_app")
shiny::runApp('assign3_shiny/Q2_app')
View(mort_comp)
View(mort_comp)
runApp('assign3_shiny/Q2_app')
runApp('assign3_shiny/Q2_app')
View(mort_comp)
knitr::opts_chunk$set(echo = TRUE)
# collapse State rows
mort_national <- mort %>%
group_by(ICD.Chapter,Year) %>%
summarize(tot_deaths = sum(Deaths), tot_pop = sum(Population))
# create national average crude rates by cause over the years
mort_national$national_crude_rate <- round((mort_national$tot_deaths / mort_national$tot_pop) * 100000, 4)
# columns we want to paste together in both dataframes
cols <- c( 'ICD.Chapter' , 'Year')
# create that new column in mort_national
mort_national$join <- apply( mort_national[ , cols] , 1 , paste , collapse = "-" )
# create that new column in mort
mort$join <- apply( mort[ , cols] , 1 , paste , collapse = "-" )
# join with state level data in new df
mort_comp <- left_join(mort, mort_national, by = "join")
# create column that shows pos/neg difference from national crude rate
mort_comp$nat_diff <- round(mort_comp$Crude.Rate - mort_comp$national_crude_rate, 4)
# create pos/neg for diverage bar chart
mort_comp$diff_type <- ifelse(mort_comp$nat_diff < 0, "above", "below")
View(mort_comp)
# collapse State rows
mort_national <- mort %>%
group_by(ICD.Chapter,Year) %>%
summarize(tot_deaths = sum(Deaths), tot_pop = sum(Population))
# create national average crude rates by cause over the years
mort_national$national_crude_rate <- round((mort_national$tot_deaths / mort_national$tot_pop) * 100000, 4)
# columns we want to paste together in both dataframes
cols <- c( 'ICD.Chapter' , 'Year')
# create that new column in mort_national
mort_national$join <- apply( mort_national[ , cols] , 1 , paste , collapse = "-" )
# create that new column in mort
mort$join <- apply( mort[ , cols] , 1 , paste , collapse = "-" )
# join with state level data in new df
mort_comp <- left_join(mort, mort_national, by = "join")
# create column that shows pos/neg difference from national crude rate
mort_comp$nat_diff <- round(mort_comp$Crude.Rate - mort_comp$national_crude_rate, 4)
# create pos/neg for diverage bar chart
mort_comp$diff_type <- ifelse(mort_comp$nat_diff < 0, "above", "below")
# collapse State rows
mort_national <- mort %>%
group_by(ICD.Chapter,Year) %>%
summarize(tot_deaths = sum(Deaths), tot_pop = sum(Population))
# create national average crude rates by cause over the years
mort_national$national_crude_rate <- round((mort_national$tot_deaths / mort_national$tot_pop) * 100000, 4)
# columns we want to paste together in both dataframes
cols <- c( 'ICD.Chapter' , 'Year')
# create that new column in mort_national
mort_national$join <- apply( mort_national[ , cols] , 1 , paste , collapse = "-" )
# create that new column in mort
mort$join <- apply( mort[ , cols] , 1 , paste , collapse = "-" )
# join with state level data in new df
mort_comp <- left_join(mort, mort_national, by = "join")
# create column that shows pos/neg difference from national crude rate
mort_comp$nat_diff <- round(mort_comp$Crude.Rate - mort_comp$national_crude_rate, 4)
# create pos/neg for diverage bar chart
mort_comp$diff_type <- ifelse(mort_comp$nat_diff > 0, "above", "below")
runApp('assign3_shiny/Q2_app')
setwd("~/ds_projects/data608/my_work/assign3_shiny/Q2_app")
deployApp()
rsconnect()
library(rsconnect)
deployApp()
